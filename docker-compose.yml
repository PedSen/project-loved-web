services:
  api:
    build:
      context: ./docker
      dockerfile: Dockerfile-nodejs
    command: ["npm", "start"]
    depends_on:
      database:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
    environment:
      HTTPS_ALWAYS: 0
      PORT: 3000
      SESSION_SECRET: development-secret
      STORAGE_PATH: /storage
      DB_DATABASE: project_loved
      DB_HOST: database
      DB_PASSWORD: ""
      DB_PORT: 3306
      DB_USER: project_loved
      DOCKER_HOST_UID_SOURCE_DIR: /app/server
    volumes:
      - api_storage:/storage
      - ./bridge:/app/bridge
      - ./server:/app/server
    working_dir: /app/server

  assets:
    build:
      context: ./docker
      dockerfile: Dockerfile-nodejs
    command: ["npm", "start"]
    depends_on:
      setup:
        condition: service_completed_successfully
    environment:
      DOCKER_HOST_UID_SOURCE_DIR: /app/client
    volumes:
      - ./bridge:/app/bridge
      - ./client:/app/client
    working_dir: /app/client

  database:
    build:
      context: ./docker
      dockerfile: Dockerfile-database
    # copied from osu-web
    # https://github.com/ppy/osu-web/blob/61519272e3eff722928305b3acae1991983c41ae/docker-compose.yml#L94-L101
    healthcheck:
      # important to use 127.0.0.1 instead of localhost as mysql starts twice.
      # the first time it listens on sockets but isn't actually ready
      # see https://github.com/docker-library/mysql/issues/663
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 1s
      timeout: 60s
      start_period: 60s
    ports:
      - "${DOCKER_EXTERNAL_MYSQL_PORT:-3306}:3306"
    volumes:
      - database:/var/lib/mysql

  nginx:
    image: nginx:1.23
    depends_on:
      - api
      - assets
    ports:
      - "${DOCKER_EXTERNAL_NGINX_PORT:-8080}:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf

  setup:
    build:
      context: ./docker
      dockerfile: Dockerfile-nodejs
    command: ["/setup-cmd.sh"]
    environment:
      DOCKER_HOST_UID_SOURCE_DIR: /app
    volumes:
      - .:/app

volumes:
  api_storage:
  database:
